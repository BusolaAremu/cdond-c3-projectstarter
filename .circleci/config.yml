version: 2.1
orbs: 
  slack: circleci/slack@4.10.1

defaults: &dockerImage
  docker:
    - image: circleci/node:13.8.0



jobs:
  build-frontend:
    <<: *dockerImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: 03-cloud-devops
          event: fail
          template: basic_fail_1

  build-backend:
    <<: *dockerImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: 03-cloud-devops
          event: fail
          template: basic_fail_1

  test-frontend:
    <<: *dockerImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: 03-cloud-devops
          event: fail
          template: basic_fail_1

  test-backend:
    <<: *dockerImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          channel: 03-cloud-devops
          event: fail
          template: basic_fail_1

  scan-frontend:
    <<: *dockerImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical
      - slack/notify:
          channel: 03-cloud-devops
          event: fail
          template: basic_fail_1

  scan-backend:
    <<: *dockerImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical
      - slack/notify:
          channel: 03-cloud-devops
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    working_directory: ~/cdond-c3-projectstarter
    docker:
    - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople

      - run:
          name: Add back-end ip to ansible inventory; Add the created EC2 instance public IP to the ansible inventory file
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text \
              --region us-east-1 >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            echo CIRCLE_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}

      - persist_to_workspace:
          root: ~/
          paths:
            -  .circleci/ansible/inventory.txt 
        # Here's where you will add some code to rollback on failure
      # - destroy-enviroment:
      #     #workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [busolaWork]
